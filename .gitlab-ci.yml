stages:
  - lint
  - test
  # - build
  # - deploy

variables:
  POSTGRES_USER: 'postgres'
  POSTGRES_PASSWORD: 'postgres'
  POSTGRES_DB: 'test_ambar_matching'
  POSTGRES_HOST_AUTH_METHOD: trust

flake8:
  stage: lint
  image: python:3.10-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8


pytest:
  stage: test
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d  # Make sure postgres and other services is running
  script:
    - docker-compose -f local.yml run django coverage run -m pytest
    - docker-compose -f local.yml run django coverage xml
    - sed -i 's/\/app/.\//g' coverage.xml  # replace source
    - docker-compose -f local.yml run django coverage report
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


# build:create-image:devel:
#   stage: build
#   image: docker/compose:1.29.2
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "develop"
#   services:
#     - docker:dind
#   script:
#     - docker-compose -f staging.yml build
#     - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker push ${CI_REGISTRY_IMAGE}:staging_django
#     - docker push ${CI_REGISTRY_IMAGE}:staging_traefik

# deploy:devel:
#   stage: deploy
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "develop"
#   before_script:
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY_DEVELOP" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - ssh-keyscan ${DEVELOP_HOST} > ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY"
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "docker image prune -f"
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "docker pull ${CI_REGISTRY_IMAGE}:staging_django"
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "docker pull ${CI_REGISTRY_IMAGE}:staging_traefik"
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "cd ambar_matching.back && git pull"
#     - ssh "${DEVELOP_USER}@${DEVELOP_HOST}" "cd ambar_matching.back && docker compose -f staging.yml up --force-recreate -d --remove-orphans"
